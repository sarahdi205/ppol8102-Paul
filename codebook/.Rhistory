# Inputs
#   X: a vector of values representing our independent variable.
#   Y: a vector of values representing our dependent variable.
# Outputs
#   a single number representing beta_1.
compute_beta0 <- function(X,Y,beta_1)
{
#calculate mean of X and Y
mean_X <- mean(X)
mean_Y <- mean(Y)
#calculate beta_0 and return the function
beta_0 <- mean_Y - beta_1 * mean_X
return(beta_1)
}
#Extract the relevant columns for regression from the US House of Representatives data set
{
x = us_house$Year
y = us_house$DemPctVotes
#Calculate beta_1 and beta_0 using the functions
beta_1 = compute_beta1(x, y)
beta_0 = compute_beta0(x, y, beta_1)
}
print(beta_1)
print(beta_0)
# This function computes the y-intercept of our regression model.
# Inputs
#   X: a vector of values representing our independent variable.
#   Y: a vector of values representing our dependent variable.
#   beta_1: our slope value (regression coefficient)
# Outputs
#   a single number representing beta_0.
compute_beta1 <- function(X,Y)
{ mean_X <- mean(X)
mean_Y <- mean(Y)
# To get beta_1
numerator <- sum((X - mean_X) * (Y - mean_Y))
denominator <- sum((X - mean_X)^2)
beta_1 <- numerator / denominator
return(beta_1)
}
# This function computes the slope of our regression model.
# Inputs
#   X: a vector of values representing our independent variable.
#   Y: a vector of values representing our dependent variable.
# Outputs
#   a single number representing beta_1.
compute_beta0 <- function(X,Y,beta_1)
{
#calculate mean of X and Y
mean_X <- mean(X)
mean_Y <- mean(Y)
#calculate beta_0 and return the function
beta_0 <- mean_Y - beta_1 * mean_X
return(beta_1)
}
#Extract the relevant columns for regression from the US House of Representatives data set
{
x = us_house$Year
y = us_house$DemPctVotes
#Calculate beta_1 and beta_0 using the functions
beta_1 = compute_beta1(x, y)
beta_0 = compute_beta0(x, y, beta_1)
}
print(beta_1)
print(beta_0)
# This function computes the y-intercept of our regression model.
# Inputs
#   X: a vector of values representing our independent variable.
#   Y: a vector of values representing our dependent variable.
#   beta_1: our slope value (regression coefficient)
# Outputs
#   a single number representing beta_0.
compute_beta1 <- function(X,Y)
{ mean_X <- mean(X)
mean_Y <- mean(Y)
# To get beta_1
numerator <- sum((X - mean_X) * (Y - mean_Y))
denominator <- sum((X - mean_X)^2)
beta_1 <- numerator / denominator
return(beta_1)
}
# This function computes the slope of our regression model.
# Inputs
#   X: a vector of values representing our independent variable.
#   Y: a vector of values representing our dependent variable.
# Outputs
#   a single number representing beta_1.
compute_beta0 <- function(X,Y,beta_1)
{
#calculate mean of X and Y
mean_X <- mean(X)
mean_Y <- mean(Y)
#calculate beta_0 and return the function
beta_0 <- mean_Y - beta1 * mean_X
return(beta_0)
}
#Extract the relevant columns for regression from the US House of Representatives data set
{
x = us_house$Year
y = us_house$DemPctVotes
#Calculate beta_1 and beta_0 using the functions
beta_1 = compute_beta1(x, y)
beta_0 = compute_beta0(x, y, beta_1)
}
compute_beta1 <- function(X,Y)
{ mean_X <- mean(X)
mean_Y <- mean(Y)
# To get beta_1
numerator <- sum((X - mean_X) * (Y - mean_Y))
denominator <- sum((X - mean_X)^2)
beta_1 <- numerator / denominator
return(beta_1)
}
# This function computes the slope of our regression model.
# Inputs
#   X: a vector of values representing our independent variable.
#   Y: a vector of values representing our dependent variable.
# Outputs
#   a single number representing beta_1.
compute_beta0 <- function(X,Y, beta1)
{
#calculate mean of X and Y
mean_X <- mean(X)
mean_Y <- mean(Y)
#calculate beta_0 and return the function
beta_0 <- mean_Y - beta1 * mean_X
return(beta_0)
}
#Extract the relevant columns for regression from the US House of Representatives data set
{
x = us_house$Year
y = us_house$DemPctVotes
#Calculate beta_1 and beta_0 using the functions
beta_1 = compute_beta1(x, y)
beta_0 = compute_beta0(x, y, beta_1)
}
print(beta_1)
print(beta_0)
# This function computes the y-intercept of our regression model.
# Inputs
#   X: a vector of values representing our independent variable.
#   Y: a vector of values representing our dependent variable.
#   beta_1: our slope value (regression coefficient)
# Outputs
#   a single number representing beta_0.
#Regression line
data(us_house)
model <- lm(year ~ DemPctVotes, data = us_house)
#Regression line
data(us_house)
model <- lm(Year ~ DemPctVotes, data = us_house)
summary(model)
plot(us_house$Year, us_house$DemPctVotes, main = "Scatterplot for Year and DemPctVotes", xlab = "Year", ylab = "Percentage of democratic Votes", pch= 19)
#Regression line
data(us_house)
model <- lm(DemPctVotes ~ Year, data = us_house)
beta_0 <- coef(model) [1] # intercept
beta_1 <- coef(model) [2] # slope
#plot the scatterplot
plot(us_house$Year, us_house$DemPctVotes, main = "Scatterplot for Year and DemPctVotes", xlab = "Year", ylab = "Percentage of democratic Votes", pch= 19)
#Regression line
abline(a= beta_0, b= beta_1, col = "red")
#Regression line
model <- lm(DemPctVotes ~ Year, data = us_house)
beta_0 <- coef(model) [1] # intercept
beta_1 <- coef(model) [2] # slope
#plot the scatterplot
plot(us_house$Year, us_house$DemPctVotes, main = "Scatterplot for Year and DemPctVotes", xlab = "Year", ylab = "Percentage of democratic Votes", pch= 19)
#Regression line
abline(a= beta_0, b= beta_1, col = "red")
regress <- lm(DemPctVotes ~ Year, data =us_house)
sum_reg <- summary(regress)
print(sum_reg)
#Scatterplot
plot(us_house$Year, us_house$DemPctVotes, main = "Scatterplot of Year and DemPctVotes", xlab= "Year", ylab= "DemPctVotes", pch= 19)
#Add the regression line
abline(reg = regress, col = "green")
us_house$DemPctVotes <- (us_house$DemPctVotes / (us_house$DemPctVotes + us_house$RepPctVotes))
us_house$DemPctSeats <- (us_house$DemPctSeats / (us_house$DemPctSeats + us_house$RepPctSeats))
Tufle_line5 <- lm(DemPctSeats ~ DemPctVotes, data = us_house[us_house$year >= 1948 & us_house <- 1970, ])
us_house$DemPctVotes <- (us_house$DemPctVotes / (us_house$DemPctVotes + us_house$RepPctVotes))
us_house$DemPctSeats <- (us_house$DemPctSeats / (us_house$DemPctSeats + us_house$RepPctSeats))
Tufle_line5 <- lm(DemPctSeats ~ DemPctVotes, data = us_house[us_house$year >= 1948 & us_house$Year <= 1970, ])
us_house$DemPctVotes <- (us_house$DemPctVotes / (us_house$DemPctVotes + us_house$RepPctVotes))
us_house$DemPctSeats <- us_house$DemPctSeats / (us_house$DemPctSeats + us_house$RepPctSeats)
Tufle_line5 <- lm(DemPctSeats ~ DemPctVotes, data = us_house[us_house$year >= 1948 & us_house$Year
<= 1970, ])
us_house$DemPctVotes <- (us_house$DemPctVotes / (us_house$DemPctVotes + us_house$RepPctVotes))
us_house$DemPctSeats <- us_house$DemPctSeats / (us_house$DemPctSeats + us_house$RepPctSeats)
Tufle_line5 <- lm(DemPctSeats ~ DemPctVotes, data = us_house[us_house$year >= 1948 & us_house$Year
<=1970, ])
us_house$DemPctVotes <- (us_house$DemPctVotes / (us_house$DemPctVotes + us_house$RepPctVotes))
us_house$DemPctSeats <- us_house$DemPctSeats / (us_house$DemPctSeats + us_house$RepPctSeats)
Tufle_line5 <- lm(DemPctSeats ~ DemPctVotes, data = us_house[us_house$year >= 1948 & us_house$Year
<=1970, ])
us_house$DemPctVotes <- (us_house$DemPctVotes / (us_house$DemPctVotes + us_house$RepPctVotes))
us_house$DemPctSeats <- us_house$DemPctSeats / (us_house$DemPctSeats + us_house$RepPctSeats)
Tufle_line5 <- lm(DemPctSeats ~ DemPctVotes, data = us_house[us_house$year >= 1948 & us_house$Year
<=1970, ])
us_house$DemPctVotes <- (us_house$DemPctVotes / (us_house$DemPctVotes + us_house$RepPctVotes))
us_house$DemPctSeats <- us_house$DemPctSeats / (us_house$DemPctSeats + us_house$RepPctSeats)
Tufle_line5 <- lm(DemPctSeats ~ DemPctVotes, data = us_house[us_house$year >= 1948 & us_house$Year
<=1970, ])
us_house$DemPctVotes <- (us_house$DemPctVotes / (us_house$DemPctVotes + us_house$RepPctVotes))
us_house$DemPctSeats <- us_house$DemPctSeats / (us_house$DemPctSeats + us_house$RepPctSeats)
Tufle_line5 <- lm(DemPctSeats ~ DemPctVotes, data = us_house[us_house$year >= 1948 & us_house$Year
<=1970, ])
us_house$DemPctVotes <- (us_house$DemPctVotes / (us_house$DemPctVotes + us_house$RepPctVotes))
us_house$DemPctSeats <- us_house$DemPctSeats / (us_house$DemPctSeats + us_house$RepPctSeats)
Tufle_line5 <- lm(DemPctSeats ~ DemPctVotes, data = us_house[us_house$year >= 1948 & us_house$Year
<=1970, ])
us_house$DemPctVotes <- (us_house$DemPctVotes / (us_house$DemPctVotes + us_house$RepPctVotes))
us_house$DemPctSeats <- us_house$DemPctSeats / (us_house$DemPctSeats + us_house$RepPctSeats)
Tufle_line5 <- lm(DemPctSeats ~ DemPctVotes, data = us_house[us_house$year >= 1948 & us_house$Year
<=1970, ])
us_house$DemPctVotes <- (us_house$DemPctVotes / (us_house$DemPctVotes + us_house$RepPctVotes))
us_house$DemPctSeats <- us_house$DemPctSeats / (us_house$DemPctSeats + us_house$RepPctSeats)
Tufle_line5 <- lm(DemPctSeats ~ DemPctVotes, data = us_house[us_house$Year >= 1948 & us_house$Year
<=1970, ])
summary(Tufle_line5)
hypothetical_election <- data.frame("DemPctVotes"=0.5)
#Use the predict function to compute how many seats we expect Democrats to win
seats_predicted <- predict(Tufle_line5, newdata= hypothetical_election)
print(seats_predicted)
hypothetical_election <- data.frame("DemPctVotes"=0.5)
#Use the predict function to compute how many seats we expect Democrats to win
seats_predicted <- predict(Tufle_line5, newdata=hypothetical_election)
print(seats_predicted)
hypothetical_election <- data.frame("DemPctVotes"=0.5)
#Use the predict function to compute how many seats we expect Democrats to win
seats_predicted <- predict(Tufle_line5, newdata=hypothetical_election)
print(seats_predicted)
us_house$DemPctVotes <- (us_house$DemPctVotes / (us_house$DemPctVotes + us_house$RepPctVotes))
us_house$DemPctSeats <- us_house$DemPctSeats / (us_house$DemPctSeats + us_house$RepPctSeats)
Tufle_line5 <- lm(DemPctSeats ~ DemPctVotes, data = us_house[us_house$Year >= 1948 & us_house$Year
<=1970, ])
summary(Tufle_line5)
hypothetical_election <- data.frame("DemPctVotes"=0.5)
#Use the predict function to compute how many seats we expect Democrats to win
seats_predicted <- predict(Tufle_line5, newdata= hypothetical_election)
print(seats_predicted)
hypothetical_election <- data.frame("DemPctVotes"=0.5)
#Use the predict function to compute how many seats we expect Democrats to win
seats_predicted <- predict(Tufle_line5, newdata= hypothetical_election)
print(seats_predicted)
hypothetical_election <- data.frame("DemPctVotes"=0.5)
#Use the predict function to compute how many seats we expect Democrats to win
seats_predicted <- predict(Tufle_line5, newdata= hypothetical_election)
print(seats_predicted)
us_house$DemPctVotes <- (us_house$DemPctVotes / (us_house$DemPctVotes + us_house$RepPctVotes))
us_house$DemPctSeats <- us_house$DemPctSeats / (us_house$DemPctSeats + us_house$RepPctSeats)
Tufle_line5 <- lm(DemPctSeats ~ DemPctVotes, data = us_house[us_house$Year >= 1948 & us_house$Year
<=1970, ])
summary(Tufle_line5)
us_house$DemPctVotes <- (us_house$DemPctVotes / (us_house$DemPctVotes + us_house$RepPctVotes))
us_house$DemPctSeats <- us_house$DemPctSeats / (us_house$DemPctSeats + us_house$RepPctSeats)
Tufle_line5 <- lm(DemPctSeats ~ DemPctVotes, data = us_house[us_house$Year >= 1948 & us_house$Year
<=1970, ])
summary(Tufle_line5)
hypothetical_election <- data.frame("DemPctVotes"=0.5)
#Use the predict function to compute how many seats we expect Democrats to win
seats_predicted <- predict(Tufle_line5, newdata= hypothetical_election)
print(seats_predicted)
hypothetical_election <- data.frame("DemPctVotes"=0.5)
#Use the predict function to compute how many seats we expect Democrats to win
seats_predicted <- predict(Tufle_line5, newdata= hypothetical_election)
print(seats_predicted)
hypothetical_election <- data.frame("DemPctVotes"=0.5)
#Use the predict function to compute how many seats we expect Democrats to win
seats_predicted <- predict(Tufle_line5, newdata= hypothetical_election)
print(seats_predicted)
gb_labour <- read.csv("gb_labour.csv")
us_house <- read.csv("us_house_of_reps.csv")
summary(gb_labour)
summary(us_house)
print(gb_labour)
print(us_house)
compute_beta1 <- function(X,Y)
{ mean_X <- mean(X)
mean_Y <- mean(Y)
# To get beta_1
numerator <- sum((X - mean_X) * (Y - mean_Y))
denominator <- sum((X - mean_X)^2)
beta_1 <- numerator / denominator
return(beta_1)
}
# This function computes the slope of our regression model.
# Inputs
#   X: a vector of values representing our independent variable.
#   Y: a vector of values representing our dependent variable.
# Outputs
#   a single number representing beta_1.
compute_beta0 <- function(X,Y, beta1)
{
#calculate mean of X and Y
mean_X <- mean(X)
mean_Y <- mean(Y)
#calculate beta_0 and return the function
beta_0 <- mean_Y - beta1 * mean_X
return(beta_0)
}
#Extract the relevant columns for regression from the US House of Representatives data set
{
x = us_house$Year
y = us_house$DemPctVotes
#Calculate beta_1 and beta_0 using the functions
beta_1 = compute_beta1(x, y)
beta_0 = compute_beta0(x, y, beta_1)
}
print(beta_1)
print(beta_0)
# This function computes the y-intercept of our regression model.
# Inputs
#   X: a vector of values representing our independent variable.
#   Y: a vector of values representing our dependent variable.
#   beta_1: our slope value (regression coefficient)
# Outputs
#   a single number representing beta_0.
#Regression line
model <- lm(DemPctVotes ~ Year, data = us_house)
beta_0 <- coef(model) [1] # intercept
beta_1 <- coef(model) [2] # slope
#plot the scatterplot
plot(us_house$Year, us_house$DemPctVotes, main = "Scatterplot for Year and DemPctVotes", xlab = "Year", ylab = "Percentage of democratic Votes", pch= 19)
#Regression line
abline(a= beta_0, b= beta_1, col = "red")
regress <- lm(DemPctVotes ~ Year, data =us_house)
sum_reg <- summary(regress)
print(sum_reg)
#Scatterplot
plot(us_house$Year, us_house$DemPctVotes, main = "Scatterplot of Year and DemPctVotes", xlab= "Year", ylab= "DemPctVotes", pch= 19)
#Add the regression line
abline(reg = regress, col = "green")
us_house$DemPctVotes <- (us_house$DemPctVotes / (us_house$DemPctVotes + us_house$RepPctVotes))
us_house$DemPctSeats <- us_house$DemPctSeats / (us_house$DemPctSeats + us_house$RepPctSeats)
Tufle_line5 <- lm(DemPctSeats ~ DemPctVotes, data = us_house[us_house$Year >= 1948 & us_house$Year
<=1970, ])
summary(Tufle_line5)
hypothetical_election <- data.frame("DemPctVotes"=0.5)
#Use the predict function to compute how many seats we expect Democrats to win
seats_predicted <- predict(Tufle_line5, newdata= hypothetical_election)
print(seats_predicted)
Democrats_bias = (0.5 + 0.4579)/ 1.9622
print(Democrats_bias)
plot(us_house$DemPctVotes[us_house$Year >=1948 & us_house$Year <=1970],
us_house$DemPctSeats[us_house$Year >= 1948 & us_house$Year <=1970], xlab = "Percent of Votes, Dem", pch = 25, col = "purple", ylab = "Percent of seats, Dem")
abline(Tufle_line5, col= "pink")
gb_labour$lab_vote_share <- gb_labour$lab_vote/ (gb_labour$lab_vote + gb_labour$con_vote)
gb_labour&lab_seat_share <- gb_labour$lab_seats/ (gb_labour$lab_seats + gb_labour$con_seats)
gb_labour$lab_vote_share <- gb_labour$lab_vote/ (gb_labour$lab_vote + gb_labour$con_vote)
gb_labour&lab_seat_share <- gb_labour$lab_seats/ (gb_labour$lab_seats + gb_labour$con_seats)
gb_labour$lab_vote_share <- gb_labour$lab_vote/ (gb_labour$lab_vote + gb_labour$con_vote)
gb_labour$lab_seat_share <- gb_labour$lab_seats/ (gb_labour$lab_seats + gb_labour$con_seats)
#plot
line1_Turfle<- lm(lab_seat_share ~ lab_vote_share, data= gb_labour)
summary(line1_Turfle)
plot(gb_labour$lab_vote_share, gb_labour$lab_seat_share, xlab = "Percent vote Labour", ylab = "Percent Seats Labour")
abline(line1_Turfle, col ="red")
gb_labour$lab_vote_share <- gb_labour$lab_vote/ (gb_labour$lab_vote + gb_labour$con_vote)
gb_labour$lab_seat_share <- gb_labour$lab_seats/ (gb_labour$lab_seats + gb_labour$con_seats)
gb_labour$lab_vote_odds <- log((gb_labour$lab_vote_share/ (1 - gb_labour$lab_vote_share)))
gb_labour$lab_seat_odds <- log((gb_labour$lab_seat_share/ (1 - gb_labour$lab_seat_share)))
regmodel_line1_tab2 <- lm(lab_seat_odds~ lab_vote_odds, data= gb_labour)
summary(regmodel_line1_tab2)
library(cachem)
## Convert course enjoyment into binary columns: higer enjoyment and medium enjoyment
course_data$highenjoyment <- as.numeric(course_data$course_enjoyment == "High")
course_data <- read.csv("course_data.csv")
head(course_data)
## Convert course enjoyment into binary columns: higer enjoyment and medium enjoyment
course_data$highenjoyment <- as.numeric(course_data$course_enjoyment == "High")
course_data$mediumenjoyment <- as.numeric(course_data$course_enjoyment == "Medium")
## Estimate the linear model with interaction terms
model <- lm(score ~ study_hours + courses_taken + (study_hours:courses_taken) + taken_before                   + course_data$highenjoyment + course_data$mediumenjoyment + female, data = course_data)
summary(model)
## Convert course enjoyment into binary columns: higer enjoyment and medium enjoyment
course_data$highenjoyment <- as.numeric(course_data$course_enjoyment == "High")
course_data$mediumenjoyment <- as.numeric(course_data$course_enjoyment == "Medium")
## Estimate the linear model with interaction terms
model <- lm(score ~ study_hours + courses_taken + (study_hours:courses_taken) + taken_before                   + course_data$highenjoyment + course_data$mediumenjoyment + female, data = course_data)
summary(model)
## Convert course enjoyment into binary columns: higer enjoyment and medium enjoyment
course_data$highenjoyment <- as.numeric(course_data$course_enjoyment == "High")
course_data$mediumenjoyment <- as.numeric(course_data$course_enjoyment == "Medium")
## Estimate the linear model with interaction terms
model <- lm(score ~ study_hours + courses_taken + (study_hours:courses_taken) + taken_before                   + highenjoyment + mediumenjoyment + female, data = course_data)
summary(model)
## Convert course enjoyment into binary columns: higer enjoyment and medium enjoyment
course_data$highenjoyment <- as.numeric(course_data$course_enjoyment == "High")
course_data$mediumenjoyment <- as.numeric(course_data$course_enjoyment == "Medium")
## Estimate the linear model with interaction terms
model <- lm(score ~ study_hours + courses_taken + study_hours:courses_taken + taken_before                   + highenjoyment + mediumenjoyment + female, data = course_data)
summary(model)
## Convert course enjoyment into binary columns: high enjoyment and medium enjoyment
course_data&highenjoyment <- as.numeric(course_data&course_enjoyment == "high")
## Convert course enjoyment into binary columns: high enjoyment and medium enjoyment
course_data&highenjoyment <- as.numeric(course_data&course_enjoyment == "high")
course_data <- read.csv("course_data.csv")
head(course_data)
## Convert course enjoyment into binary columns: high enjoyment and medium enjoyment
course_data&highenjoyment <- as.numeric(course_data&course_enjoyment == "high")
## Convert course enjoyment into binary columns: high enjoyment and medium enjoyment
course_data&highenjoyment <- as.numeric(course_data&course_enjoyment == "high" )
## Convert course enjoyment into binary columns: high enjoyment and medium enjoyment
course_data&highenjoyment <- as.numeric(course_data&course_enjoyment == "high" )
## Convert course enjoyment into binary columns: high enjoyment and medium enjoyment
course_data&highenjoyment <- as.numeric(course_data&course_enjoyment == "high")
## Convert course enjoyment into binary columns: higer enjoyment and medium enjoyment
course_data$highenjoyment <- as.numeric(course_data$course_enjoyment == "High")
course_data$mediumenjoyment <- as.numeric(course_data$course_enjoyment == "Medium")
## Estimate the linear model with interaction terms
model <- lm(score ~ study_hours + courses_taken + study_hours:courses_taken + taken_before                   + highenjoyment + mediumenjoyment + female, data = course_data)
summary(model)
## Convert course enjoyment into binary columns: high enjoyment and medium enjoyment
course_data&highenjoyment <- as.numeric(course_data&course_enjoyment == "high")
library(foreign)
NSSRN_2022<- read.dta("nssrn_2022_puf.dta")
# Install the haven package (if not already installed)
install.packages("haven")
# Load the haven package
library(haven)
# Read a SAS file
data <- read_sas("nssrn_2022_puf.sas7bdat")
# Install the haven package (if not already installed)
install.packages("haven")
# Load the haven package
library(haven)
# Read a SAS file
data <- read_sas("nssrn_2022_puf.sas7bdat")
library(foreign)
NSSRN_2022<- read.dta("nssrn_2022_puf.dta")
library(foreign)
NSSRN_2022<- read.dta("nssrn_2022_puf.dta")
file.exists("nssrn_2022_puf.dta")
getwd()
library(foreign)
NSSRN_2022<- read.dta("nssrn_2022_puf.dta")
library(foreign)
NSSRN_2022<- read.dta("nssrn2022")
library(foreign)
NSSRN_2022<- read.dta("nssrn2022")
library(foreign)
NSSRN_2022<- read.dta("NSSRN_2022")
library(foreign)
NSSRN_2022<- read.dta("NSSRN_2022")
library(foreign)
NSSRN_2022<- read.dta("NSSRN_2022")
# Install the haven package (if not already installed)
install.packages("haven")
# Load the haven package
library(haven)
# Read a SAS file
data <- read_sas("nssrn_2022_puf.sas7bdat")
# Install the haven package (if not already installed)
install.packages("haven")
# Load the haven package
library(haven)
# Read a SAS file
data <- read_sas("nssrn_2022_puf.sas7bdat")
# View the first few rows of the data
write.csv(data, file = "NSSRN_2022.csv")
### THIS IS THE CODE CHUNK YOU SHOULD RUN. IGNORE THE REST!
NSSRN2022<- read.csv("NSSRN2022.csv")
NSSRN2022
#coding races
NSSRN2022$Americanind <- ifelse(NSSRN2022$race == 1, 1, 0)
NSSRN2022$Asian <- ifelse(NSSRN2022$race == 2, 1, 0)
NSSRN2022$Black <- ifelse(NSSRN2022$race == 3, 1, 0)
NSSRN2022$Hawaiin <- ifelse(NSSRN2022$race == 4, 1, 0)
NSSRN2022$White <- ifelse(NSSRN2022$race == 5, 1, 0)
NSSRN2022$Multi <- ifelse(NSSRN2022$race == 6, 1, 0)
#coding education
NSSRN2022$diploma <- ifelse(NSSRN2022$higheduc == 1, 1, 0)
NSSRN2022$associate <- ifelse(NSSRN2022$higheduc == 2, 1, 0)
NSSRN2022$bachelors <- ifelse(NSSRN2022$higheduc == 3, 1, 0)
NSSRN2022$masters <- ifelse(NSSRN2022$higheduc == 4, 1, 0)
NSSRN2022$doctorate <- ifelse(NSSRN2022$higheduc == 5, 1, 0)
NSSRN2022
hist(NSSRN2022$satis)
## Regression
NSSRNreg1 <- lm(satis~  age+marital+employ+Asian+Black+Hawaiin+Multi+Americanind+associate+bachelors+masters+doctorate, data= NSSRN2022)
summary(NSSRNreg1)
NSSRNreg2 <- lm(burnout_2021~  age+marital+employ+Asian+Black+Hawaiin+Multi+Americanind+associate+bachelors+masters+doctorate, data= NSSRN2022)
summary(NSSRNreg2)
NSSRNreg3 <- lm (burnout_2021 ~  satis+age+marital+employ+Asian+Black+Hawaiin+Multi+Americanind+associate+bachelors+masters+doctorate, data= NSSRN2022)
summary(NSSRNreg3)
setwd("~/")
getwd()
setwd("C:\Users\sarad\OneDrive\Desktop\Advance Statistic")
setwd(C:\Users\sarad\OneDrive\Desktop\Advance Statistic)
setwd("\Users\sarad\OneDrive\Desktop\Advance Statistic")
setwd(C:\Users\sarad\OneDrive\Desktop\Advance Statistic)
setwd("C:/Users/sarad/OneDrive/Documents/GitHub/ppol8102-Paul")
knitr::opts_chunk$set(echo = TRUE)
read.csv("clean_data")
setwd("C:/Users/sarad/OneDrive/Documents/GitHub/ppol8102-Paul")
read.csv("clean_data.csv")
read.csv("clean_data.csv")
read.csv("C:\Users\sarad\OneDrive\Desktop\Studio 2\clean_data.csv")
read.csv("C:\Users\sarad\OneDrive\Desktop\Studio 2\clean_data.csv")
read.csv(C:\Users\sarad\OneDrive\Desktop\Studio 2\clean_data.csv)
read.csv("C:\Users\sarad\OneDrive\Desktop\Studio 2\clean_data.csv")
read.csv("clean_data.csv")
setwd("~/GitHub/ppol8102-Paul/codebook")
read.csv("clean_data.csv")
read.csv("clean_data.csv")
read.csv("clean_data.csv")
getwd()
data <- read.csv("clean_data.csv")
list.files()
data <- read.csv("clean_data.csv")
data <- read.table("clean_data.csv")
